options {
    FORCE_LA_CHECK = true;
    LOOKAHEAD = 15;
}
  

PARSER_BEGIN(LugosiParser)
import java.io.*;
import java.util.*;

public class LugosiParser {
    public static void main(String[] args) throws ParseException,IOException {
        LugosiParser parser;

        if (args.length == 0) {
            System.out.println("Usage: java LugosiParser <inputfile>");
            return;
        }else if (args.length == 1) {
           try {
                System.out.println("Parsing " + args[0]);
                System.out.println("====================================");
                parser = new LugosiParser(new FileInputStream(args[0]));
                parser.LugosiParser();
            } catch (FileNotFoundException e) {
                System.out.println("File " + args[0] + " not found.");
                return;
            }
        }

    }
}

PARSER_END(LugosiParser)

SKIP : {
    " " 
    | "\t" 
    | "\n" 
    | "\r" 
}

TOKEN : { 
   <VOID: "void">
 | <MAIN: "main">
 | <LET: "let">
 | <DEF: "def">
 | <FLOAT: "float">
 | <BOOL: "bool">
 | <IF: "if">
 | <WHILE: "while">
 | <DO: "do">
 | <READIO: "readIO">
 | <PRINTIO: "printIO">
 | <RETURN: "return">
 | <TRUE: "true">
 | <FALSE: "false">
 | <PLUS: "+">
 | <MINUS: "-">
 | <TIMES: "*">
 | <DIV: "/">
 | <MOD: "%">
 | <AND: "&&">
 | <OR: "||">
 | <LT: "<">
 | <GT: ">"> 
 | <GE: ">=">
 | <LE: "<=">
 | <EQUALS: "==">
 | <ATR: ":=">
 | <OPEN_BRACES: "{">
 | <CLOSE_BRACES: "}">
 | <OPEN_PARENTHESES: "(">
 | <CLOSE_PARENTHESES: ")">
 | <SEMICOLON: ";">
 | <COMMA: ",">
}

// Convensoes lexicas
TOKEN :
{
    <NUM : (["0"-"9"])+ ( "." (["0"-"9"])+ )?>
 |  <ID:  (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9"])* ( "_" (["a"-"z","A"-"Z","0"-"9"])+ )*>
}

// LUGOSI -> MAIN FUNC?
// LUGOSI -> MAIN FUNC_LIST
// FUNC_LIST -> FUNC FUNC_LIST | vazio
void LugosiParser() : {}
{
    main() FuncList() <EOF>
}

// MAIN -> "void" "main" "{" VARDECL SEQCOMANDOS "}"
void main() : {}
{
    <VOID> <MAIN> <OPEN_BRACES> VarDecl() SeqComandos() <CLOSE_BRACES>
}

// VARDECL -> VARDECL "let" TIPO TOKEN_id ";" | vazio
// VARDECL -> "let" TIPO TOKEN_id ";" VARDECL_
// VARDECL_ ->  "let" TIPO TOKEN_id ";" VARDECL_ | vazio
// Colocar tudo ()? garante que a recursao conseguira parar
void VarDecl() : {}
{
    (
        <LET> Tipo() <ID> <SEMICOLON> VarDecl()
    )?
}

// TIPO -> "float" | "bool" | "void"
String Tipo() : {Token t;}
{
    (
        t = <FLOAT> {return t.image;}
    |   t = <BOOL> {return t.image;}
    |   t = <VOID> {return t.image;}
    )

}

// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
// SEQCOMANDOS -> COMANDO SEQCOMANDOS_
// SEQCOMANDOS_ -> COMANDO SEQCOMANDOS_ | vazio
void SeqComandos() : {}
{
    (
        Comando() SeqComandos()
    )?
}

// COMANDO -> TOKEN_id ":=" EXP ";"
//         | TOKEN_id "(" LISTAEXP? ")" ";"
//         | TOKEN_id ":=" "readIO" "(" ")" ";"
//         | "if" EXP "{" SEQCOMANDOS "}" ";"
//         | "while" EXP "do" "{" SEQCOMANDOS "}" ";"
//         | "return" EXP ";"
//         | "printIO" EXP ";"
void Comando() : {}
{
    (
        //Workaround para o problema de recursao a esquerda
        <ID> (
                <ATR> ( 
                    <READIO> <OPEN_PARENTHESES> <CLOSE_PARENTHESES>
                    |  Exp() 
            )
            |   <OPEN_PARENTHESES> (ListaExp())? <CLOSE_PARENTHESES>
        ) <SEMICOLON>
    |   <IF> Exp() <OPEN_BRACES> SeqComandos() <CLOSE_BRACES> <SEMICOLON>
    |   <WHILE> Exp() <DO> <OPEN_BRACES> SeqComandos() <CLOSE_BRACES> <SEMICOLON>
    |   <RETURN> Exp() <SEMICOLON>
    |   <PRINTIO> Exp() <SEMICOLON>
    )
}

// EXP -> "(" EXP OP EXP ")" | FATOR
// EXP -> FATOR EXP_
// EXP_ -> OP FATOR EXP_ | vazio
void Exp() : {}
{
    (
       Fator() (Op() Fator())?
    )
}


// FATOR -> TOKEN_id 
//       | TOKEN_id "(" LISTAEXP? ")"
//       | TOKEN_numliteral 
//       | "true" 
//       | "false"
void Fator() : {}
{
    (
        <ID> (
            <OPEN_PARENTHESES> (ListaExp())? <CLOSE_PARENTHESES>
        )?
    |   <NUM>
    |   <TRUE>
    |   <FALSE>
    |  <OPEN_PARENTHESES> Exp() <CLOSE_PARENTHESES>
    )
}

// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
// Adicionado MOD para divisao inteira
// Adicionado GE e LE para >= e <=
String Op() : {Token t;}
{
    (
        t = <PLUS> {return t.image;}
    |   t = <MINUS> {return t.image;}
    |   t = <TIMES> {return t.image;}
    |   t = <DIV> {return t.image;}
    |   t = <MOD> {return t.image;}
    |   t = <AND> {return t.image;}
    |   t = <OR> {return t.image;}
    |   t = <LT> {return t.image;}
    |   t = <GT> {return t.image;}
    |   t = <GE> {return t.image;}
    |   t = <LE> {return t.image;}
    |   t = <EQUALS> {return t.image;}
    )
}

// LISTAEXP -> EXP | LISTAEXP "," EXP
// LISTAEXP -> EXP LISTAEXP_
// LISTAEXP_ -> "," EXP LISTAEXP_ | vazio
void ListaExp() : {}
{
    (
        Exp() ListaExp_()
    )
}

void ListaExp_() : {}
{
    (
        <COMMA> Exp() ListaExp_()
    )?
}


// FUNC -> FUNC "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
//       | "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// FUNC_LIST -> FUNC FUNC_LIST | vazio
// FUNC -> "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
void FuncList() : {}
{
    (
        Func() FuncList()
    )?
}

void Func() : {}
{
    (
        <DEF> Tipo() <ID> <OPEN_PARENTHESES> (ListaArg())? <CLOSE_PARENTHESES> <OPEN_BRACES> VarDecl() SeqComandos() <CLOSE_BRACES>
    )
}

//LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
//LISTAARG -> TIPO TOKEN_id LISTAARG_
//LISTAARG_ -> "," TIPO TOKEN_id LISTAARG_ | vazio
void ListaArg() : {}
{
    (
        Tipo() <ID> ListaArg_()
    )
}

void ListaArg_() : {}
{
    (
        <COMMA> Tipo() <ID> ListaArg_()
    )?
}

